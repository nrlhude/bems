// File Path: /scenes/dashboard/index.jsx
// Route Path: /dashboard

import React, { useState, useEffect } from 'react';
import { Box, Button, IconButton, Typography, useTheme } from "@mui/material";
import { tokens } from "../../theme";
import DownloadOutlinedIcon from "@mui/icons-material/DownloadOutlined";
import EmailIcon from "@mui/icons-material/Email";
import PointOfSaleIcon from "@mui/icons-material/PointOfSale";
import PersonAddIcon from "@mui/icons-material/PersonAdd";
import TrafficIcon from "@mui/icons-material/Traffic";
import Header from "../../components/Header";
import LineChart from "../../components/LineChart";
import GeographyChart from "../../components/GeographyChart";
import BarChart from "../../components/BarChart";
import StatBox from "../../components/StatBox";
import ProgressCircle from "../../components/ProgressCircle";import { Link as RouterLink } from 'react-router-dom';
import { Link } from 'react-router-dom';
import axios from 'axios';

// use my database
const Dashboard = () => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);

  // Data : User, Teacher, TeacherProfile, Parent, ParentProfile, , SchoolSession, Kelas, TunjangUtama, SubTunjang, Fokus, StdKandungan, StdPembelajaran, PenerapanNilai, StdPrestasiCriteria, StdPrestasiLevel, , StudentProfile, PeopleKelas, , KelasSession, RPH, , EvaluateKelas, StudentEvaluate, StdPrestasiEvaluation, , AttendanceKelas, StudentAttendance, , StudentReport, StudentReportEvaluation, ReportClass

  const[users, setUsers] = useState([]);
  const [teacherprofile, setTeacherProfile] = useState([]);
  const [parentprofile, setParentProfile] = useState([]);
  const [schoolsession, setSchoolSession] = useState([]);
  const [kelas, setKelas] = useState([]); 
  const [tunjangutama, setTunjangUtama] = useState([]);
  const [subtunjang, setSubTunjang] = useState([]);
  const [fokus, setFokus] = useState([]);
  const [stdkandungan, setStdKandungan] = useState([]);
  const [stdpembelajaran, setStdPembelajaran] = useState([]);
  const [penerapannilai, setPenerapanNilai] = useState([]);
  const [stdprestasicriteria, setStdPrestasiCriteria] = useState([]);
  const [stdprestasilevel, setStdPrestasiLevel] = useState([]);
  const [studentprofile, setStudentProfile] = useState([]);
  const [peoplekelas, setPeopleKelas] = useState([]);
  const [kelassession, setKelasSession] = useState([]);
  const [rph, setRPH] = useState([]);
  const [evaluatekelas, setEvaluateKelas] = useState([]);
  const [studentevaluate, setStudentEvaluate] = useState([]);
  const [stdprestasievaluation, setStdPrestasiEvaluation] = useState([]);
  const [attendancekelas, setAttendanceKelas] = useState([]);
  const [studentattendance, setStudentAttendance] = useState([]);
  const [studentreport, setStudentReport] = useState([]);
  const [studentreportevaluation, setStudentReportEvaluation] = useState([]);
  const [reportclass, setReportClass] = useState([]);
  const [loading, setLoading] = useState(true);

  const fetchData = async () => {
    try {
        const [
          usersData,
          teacherProfileData,
          parentProfileData,
          schoolsessionData,
          kelasData,
          tunjangutamaData,
          subtunjangData,
          fokusData,
          stdkandunganData,
          stdpembelajaranData,
          penerapannilaiData,
          stdprestasicriteriaData,
          stdprestasilevelData,
          studentprofileData,
          peoplekelasData,
          kelassessionData,
          rphData,
          evaluatekelasData,
          studentevaluateData,
          stdprestasievaluationData,
          attendancekelasData,
          studentattendanceData,
          studentreportData,
          studentreportevaluationData,
          reportclassData,
        ] = await Promise.all([
          axios.get('http://127.0.0.1:8000/api/user/'),
          axios.get('http://127.0.0.1:8000/api/teacherprofile/'),
          axios.get('http://127.0.0.1:8000/api/parentprofile/'),
          axios.get('http://127.0.0.1:8000/api/school-sessions/'),
          axios.get('http://127.0.0.1:8000/api/kelass/'),
          axios.get('http://127.0.0.1:8000/api/tunjang-utama/'),
          axios.get('http://127.0.0.1:8000/api/sub-tunjang/'),
          axios.get('http://127.0.0.1:8000/api/fokus/'),
          axios.get('http://127.0.0.1:8000/api/std-kandungan/'),
          axios.get('http://127.0.0.1:8000/api/std-pembelajaran/'),
          axios.get('http://127.0.0.1:8000/api/penerapan-nilai/'),
          axios.get('http://127.0.0.1:8000/api/stdprestasicriteria/'),
          axios.get('http://127.0.0.1:8000/api/stdprestasilevel/'),
          axios.get('http://127.0.0.1:8000/api/studentprofile/'),
          axios.get('http://127.0.0.1:8000/api/people-kelas/'),
          axios.get('http://127.0.0.1:8000/api/kelas-session/'),
          axios.get('http://127.0.0.1:8000/api/rph/'),
          axios.get('http://127.0.0.1:8000/api/evaluate-kelas/'),
          axios.get('http://127.0.0.1:8000/api/student-evaluate/'),
          axios.get('http://127.0.0.1:8000/api/stdprestasievaluation/'),
          axios.get('http://127.0.0.1:8000/api/attendance-kelas/'),
          axios.get('http://127.0.0.1:8000/api/student-attendance/'),
          axios.get('http://127.0.0.1:8000/api/studentreport/'),
          axios.get('http://127.0.0.1:8000/api/studentreportevaluation/'),
          axios.get('http://127.0.0.1:8000/api/report-class/'),
        ]);

        setUsers(usersData.data);
        setTeacherProfile(teacherProfileData.data);
        setParentProfile(parentProfileData.data);
        setSchoolSession(schoolsessionData.data);
        setKelas(kelasData.data);
        setTunjangUtama(tunjangutamaData.data);
        setSubTunjang(subtunjangData.data);
        setFokus(fokusData.data);
        setStdKandungan(stdkandunganData.data);
        setStdPembelajaran(stdpembelajaranData.data);
        setPenerapanNilai(penerapannilaiData.data);
        setStdPrestasiCriteria(stdprestasicriteriaData.data);
        setStdPrestasiLevel(stdprestasilevelData.data);
        setStudentProfile(studentprofileData.data);
        setPeopleKelas(peoplekelasData.data);
        setKelasSession(kelassessionData.data);
        setRph(rphData.data);
        setEvaluateKelas(evaluatekelasData.data);
        setStudentEvaluate(studentevaluateData.data);
        setStdPrestasiEvaluation(stdprestasievaluationData.data);
        setAttendanceKelas(attendancekelasData.data);
        setStudentAttendance(studentattendanceData.data);
        setStudentReport(studentreportData.data);
        setStudentReportEvaluation(studentreportevaluationData.data);
        setReportClass(reportclassData.data);

        setLoading(false);
    }
    catch (error) {
        console.log(error);
    }
  }

  



  return (
    <Box m="20px">
      {/* HEADER */}
      <Box display="flex" justifyContent="space-between" alignItems="center">
        <Header title="Utama" subtitle="Selamat datang, " />

        <Box>
          <Button
            sx={{
              backgroundColor: colors.blueAccent[700],
              color: colors.grey[100],
              fontSize: "14px",
              fontWeight: "bold",
              padding: "10px 20px",
            }}
          >
            <DownloadOutlinedIcon sx={{ mr: "10px" }} />
            Download Reports
          </Button>
        </Box>
      </Box>

      {/* GRID & CHARTS */}
      <Box
        display="grid"
        gridTemplateColumns="repeat(12, 1fr)"
        gridAutoRows="140px"
        gap="20px"
      >
        {/* ROW 1 */}
        <Box
          gridColumn="span 3"
          backgroundColor={colors.primary[400]}
          display="flex"
          alignItems="center"
          justifyContent="center"
        >
          <StatBox
            title="12,361"
            subtitle="Emails Sent"
            progress="0.75"
            increase="+14%"
            icon={
              <EmailIcon
                sx={{ color: colors.greenAccent[600], fontSize: "26px" }}
              />
            }
          />
        </Box>
        <Box
          gridColumn="span 3"
          backgroundColor={colors.primary[400]}
          display="flex"
          alignItems="center"
          justifyContent="center"
        >
          <StatBox
            title="431,225"
            subtitle="Sales Obtained"
            progress="0.50"
            increase="+21%"
            icon={
              <PointOfSaleIcon
                sx={{ color: colors.greenAccent[600], fontSize: "26px" }}
              />
            }
          />
        </Box>
        <Box
          gridColumn="span 3"
          backgroundColor={colors.primary[400]}
          display="flex"
          alignItems="center"
          justifyContent="center"
        >
          <StatBox
            title="32,441"
            subtitle="New Clients"
            progress="0.30"
            increase="+5%"
            icon={
              <PersonAddIcon
                sx={{ color: colors.greenAccent[600], fontSize: "26px" }}
              />
            }
          />
        </Box>
        <Box
          gridColumn="span 3"
          backgroundColor={colors.primary[400]}
          display="flex"
          alignItems="center"
          justifyContent="center"
        >
          <StatBox
            title="1,325,134"
            subtitle="Traffic Received"
            progress="0.80"
            increase="+43%"
            icon={
              <TrafficIcon
                sx={{ color: colors.greenAccent[600], fontSize: "26px" }}
              />
            }
          />
        </Box>

        {/* ROW 2 */}
        <Box
          gridColumn="span 8"
          gridRow="span 2"
          backgroundColor={colors.primary[400]}
        >
          <Box
            mt="25px"
            p="0 30px"
            display="flex "
            justifyContent="space-between"
            alignItems="center"
          >
            <Box>
              <Typography
                variant="h5"
                fontWeight="600"
                color={colors.grey[100]}
              >
                Revenue Generated
              </Typography>
              <Typography
                variant="h3"
                fontWeight="bold"
                color={colors.greenAccent[500]}
              >
              </Typography>
            </Box>
            <Box>
              <IconButton>
                <DownloadOutlinedIcon
                  sx={{ fontSize: "26px", color: colors.greenAccent[500] }}
                />
              </IconButton>
            </Box>
          </Box>
          <Box height="250px" m="-20px 0 0 0">
            <LineChart isDashboard={true} />
          </Box>
        </Box>
        <Box
          gridColumn="span 4"
          gridRow="span 2"
          backgroundColor={colors.primary[400]}
          overflow="auto"
        >
          <Box
            display="flex"
            justifyContent="space-between"
            alignItems="center"
            borderBottom={`4px solid ${colors.primary[500]}`}
            colors={colors.grey[100]}
            p="15px"
          >
            <Typography color={colors.grey[100]} variant="h5" fontWeight="600">
              Recent Transactions
            </Typography>
          </Box>
          
            <Box
              display="flex"
              justifyContent="space-between"
              alignItems="center"
              borderBottom={`4px solid ${colors.primary[500]}`}
              p="15px"
            >
              <Box>
                <Typography
                  color={colors.greenAccent[500]}
                  variant="h5"
                  fontWeight="600"
                >
                </Typography>
                <Typography color={colors.grey[100]}>
                </Typography>
              </Box>
              <Box color={colors.grey[100]}></Box>
              <Box
                backgroundColor={colors.greenAccent[500]}
                p="5px 10px"
                borderRadius="4px"
              >
              </Box>
            </Box>
        </Box>

        {/* ROW 3 */}
        <Box
          gridColumn="span 4"
          gridRow="span 2"
          backgroundColor={colors.primary[400]}
          p="30px"
        >
          <Typography variant="h5" fontWeight="600">
            Campaign
          </Typography>
          <Box
            display="flex"
            flexDirection="column"
            alignItems="center"
            mt="25px"
          >
            <ProgressCircle size="125" />
            <Typography
              variant="h5"
              color={colors.greenAccent[500]}
              sx={{ mt: "15px" }}
            >
              $48,352 revenue generated
            </Typography>
            <Typography>Includes extra misc expenditures and costs</Typography>
          </Box>
        </Box>
        <Box
          gridColumn="span 4"
          gridRow="span 2"
          backgroundColor={colors.primary[400]}
        >
          <Typography
            variant="h5"
            fontWeight="600"
            sx={{ padding: "30px 30px 0 30px" }}
          >
            Sales Quantity
          </Typography>
          <Box height="250px" mt="-20px">
            <BarChart isDashboard={true} />
          </Box>
        </Box>
        <Box
          gridColumn="span 4"
          gridRow="span 2"
          backgroundColor={colors.primary[400]}
          padding="30px"
        >
          <Typography
            variant="h5"
            fontWeight="600"
            sx={{ marginBottom: "15px" }}
          >
            Geography Based Traffic
          </Typography>
          <Box height="200px">
            <GeographyChart isDashboard={true} />
          </Box>
        </Box>
      </Box>
    </Box>
  );
};

export default Dashboard;
